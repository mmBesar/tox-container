#!/bin/sh
set -e

# entrypoint.sh - Tox DHT Bootstrap Node Entrypoint
# Handles environment variable configuration and starts DHT_bootstrap

echo "Starting Tox DHT Bootstrap Node..."
echo "Local network functionality: ALWAYS ENABLED"
echo "Internet connectivity: ${TOX_ENABLE_INTERNET}"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Validate environment variables
validate_env() {
    # Validate port
    if ! echo "${TOX_PORT}" | grep -qE '^[0-9]+$' || [ "${TOX_PORT}" -lt 1 ] || [ "${TOX_PORT}" -gt 65535 ]; then
        log "ERROR: TOX_PORT must be a valid port number (1-65535)"
        exit 1
    fi
    
    # Validate boolean values
    case "${TOX_ENABLE_INTERNET}" in
        true|false|1|0|yes|no|on|off) ;;
        *) log "ERROR: TOX_ENABLE_INTERNET must be true/false/1/0/yes/no/on/off"; exit 1 ;;
    esac
}

# Convert boolean environment variables
normalize_bool() {
    case "${TOX_ENABLE_INTERNET}" in
        true|1|yes|on) TOX_ENABLE_INTERNET=true ;;
        false|0|no|off) TOX_ENABLE_INTERNET=false ;;
    esac
}

# Handle user permissions for volume mounts
handle_permissions() {
    # If running as root, switch to the specified user
    if [ "$(id -u)" = "0" ]; then
        # If PUID/PGID are set, use them
        if [ -n "${PUID:-}" ] && [ -n "${PGID:-}" ]; then
            log "Switching to UID:GID ${PUID}:${PGID}"
            
            # Create group and user if they don't exist
            getent group "$PGID" >/dev/null 2>&1 || addgroup -g "$PGID" toxuser
            getent passwd "$PUID" >/dev/null 2>&1 || adduser -u "$PUID" -G "$(getent group "$PGID" | cut -d: -f1)" -s /bin/sh -D toxuser
            
            # Ensure the data directory is owned by the target user
            chown -R "${PUID}:${PGID}" /data
            
            # Execute as the target user
            exec su-exec "${PUID}:${PGID}" "$0" "$@"
        else
            # Default to toxcore user
            chown -R toxcore:toxcore /data
            exec su-exec toxcore:toxcore "$0" "$@"
        fi
    fi
}

# Generate or load bootstrap keys
setup_keys() {
    local keys_file="${TOX_KEYS_FILE}"
    
    if [ ! -f "${keys_file}" ]; then
        log "Keys file not found at ${keys_file}, will be generated by DHT_bootstrap"
        mkdir -p "$(dirname "${keys_file}")"
    else
        log "Using existing bootstrap keys from ${keys_file}"
    fi
}

# Get list of known bootstrap nodes for internet connectivity
get_bootstrap_nodes() {
    # These are well-known public Tox bootstrap nodes
    # Only used when TOX_ENABLE_INTERNET=true
    cat << EOF
tox.verdict.gg:33445
nodes.tox.chat:33445
bootstrap.tox.chat:33445
tox.initramfs.io:33445
kusoneko.moe:33445
EOF
}

# Build DHT_bootstrap command arguments
build_args() {
    local args=""
    
    # Port configuration
    args="${args} --port ${TOX_PORT}"
    
    # Keys file
    if [ -n "${TOX_KEYS_FILE}" ]; then
        args="${args} --keys-file ${TOX_KEYS_FILE}"
    fi
    
    # Enable LAN discovery (always on for local network support)
    args="${args} --enable-lan-discovery"
    
    # If internet is disabled, we'll handle this through network isolation
    # The DHT_bootstrap daemon itself doesn't have a "local only" mode
    # Network isolation should be handled at Docker level
    
    echo "${args}"
}

# Apply network restrictions if internet is disabled
setup_network_restrictions() {
    if [ "${TOX_ENABLE_INTERNET}" = "false" ]; then
        log "Internet connectivity disabled - container should be run with network restrictions"
        log "Recommended: Use Docker networks with 'internal: true' or custom bridge networks"
        log "Local network discovery will still function within the Docker network"
    else
        log "Internet connectivity enabled - will connect to public Tox DHT network"
    fi
}

# Signal handlers for graceful shutdown
trap_signals() {
    trap 'log "Received SIGTERM, shutting down..."; kill -TERM $PID 2>/dev/null; wait $PID' TERM
    trap 'log "Received SIGINT, shutting down..."; kill -INT $PID 2>/dev/null; wait $PID' INT
}

# Display bootstrap node information
show_bootstrap_info() {
    if [ "${TOX_ENABLE_INTERNET}" = "true" ]; then
        log "Will attempt to connect to public bootstrap nodes:"
        get_bootstrap_nodes | while read -r node; do
            [ -n "$node" ] && log "  - $node"
        done
    else
        log "Public bootstrap nodes disabled - local network only"
    fi
}

# Main execution
main() {
    log "Initializing Tox DHT Bootstrap Node..."
    
    # Validate and normalize environment
    validate_env
    normalize_bool
    
    # Handle permissions
    handle_permissions
    
    # Setup bootstrap keys
    setup_keys
    
    # Setup network restrictions info
    setup_network_restrictions
    
    # Build command arguments
    local cmd_args
    cmd_args=$(build_args)
    
    log "Configuration:"
    log "  Port: ${TOX_PORT} (TCP/UDP)"  
    log "  Keys file: ${TOX_KEYS_FILE}"
    log "  Internet: ${TOX_ENABLE_INTERNET}"
    log "  User: $(id -u):$(id -g)"
    log "  MOTD: ${TOX_MOTD}"
    
    # Show bootstrap information
    show_bootstrap_info
    
    # Setup signal handling
    trap_signals
    
    log "Starting DHT_bootstrap with args: ${cmd_args}"
    
    # Start DHT_bootstrap in the background
    # shellcheck disable=SC2086
    DHT_bootstrap ${cmd_args} &
    PID=$!
    
    log "DHT_bootstrap started with PID: ${PID}"
    log "Ready to accept connections on port ${TOX_PORT}"
    log "Local clients can ALWAYS connect (offline capability maintained)"
    
    # Wait for the process to complete
    wait $PID
    local exit_code=$?
    
    log "DHT_bootstrap has stopped with exit code: ${exit_code}"
    exit $exit_code
}

# Execute main function
main "$@"
