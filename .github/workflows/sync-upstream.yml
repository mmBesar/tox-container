name: Sync Upstream

on:
  # schedule:
  #   - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
      latest-release: ${{ steps.check.outputs.latest-release }}
      new-release: ${{ steps.check.outputs.new-release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/TokTok/c-toxcore.git || true
          git fetch upstream --tags

      - name: Check for changes and releases
        id: check
        run: |
          # Get latest upstream commit
          UPSTREAM_COMMIT=$(git rev-parse upstream/master)
          
          # Check if upstream branch exists and get its commit
          if git rev-parse origin/upstream >/dev/null 2>&1; then
            CURRENT_COMMIT=$(git rev-parse origin/upstream)
          else
            CURRENT_COMMIT="none"
          fi
          
          # Check for changes
          if [ "$UPSTREAM_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in upstream"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes in upstream"
          fi
          
          # Get latest release tag from upstream
          LATEST_RELEASE=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "none")
          echo "latest-release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          
          # Check if we already have this release
          if [ "$LATEST_RELEASE" != "none" ] && ! git rev-parse "refs/tags/$LATEST_RELEASE" >/dev/null 2>&1; then
            echo "new-release=true" >> $GITHUB_OUTPUT
            echo "New release found: $LATEST_RELEASE"
          else
            echo "new-release=false" >> $GITHUB_OUTPUT
            echo "No new release"
          fi

      - name: Update upstream branch
        if: steps.check.outputs.has-changes == 'true'
        run: |
          # Create/update upstream branch
          git checkout -B upstream upstream/master
          
          # Remove .github directory to avoid permission issues
          rm -rf .github || true
          
          # Commit changes if any
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "Sync upstream - $(date +%Y-%m-%d)"
          fi
          
          # Push upstream branch
          git push origin upstream --force
          echo "Upstream branch updated successfully"

      - name: Create new release tag
        if: steps.check.outputs.new-release == 'true'
        run: |
          RELEASE_TAG="${{ steps.check.outputs.latest-release }}"
          
          # Create annotated tag from upstream commit
          git tag -a "$RELEASE_TAG" upstream/master -m "Release $RELEASE_TAG from upstream"
          git push origin "$RELEASE_TAG"
          
          echo "Created release tag: $RELEASE_TAG"

      - name: Summary
        run: |
          echo "## Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ steps.check.outputs.has-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Release:** ${{ steps.check.outputs.latest-release }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **New Release:** ${{ steps.check.outputs.new-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
