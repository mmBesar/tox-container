name: Sync and Build

on:
  # schedule:
  #   - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote and sync
        id: sync
        run: |
          git remote add upstream https://github.com/TokTok/c-toxcore.git || true
          git fetch upstream
          
          # Get latest release tag
          LATEST_TAG=$(git ls-remote --tags upstream | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ | sed 's/.*refs\/tags\///' | sort -V | tail -1)
          
          # Check if we have this release already
          if git rev-parse "refs/tags/$LATEST_TAG" >/dev/null 2>&1; then
            echo "build-type=nightly" >> $GITHUB_OUTPUT
            echo "version=nightly-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
            echo "No new release, building nightly"
          else
            echo "build-type=release" >> $GITHUB_OUTPUT
            echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$LATEST_TAG,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
            # Create the new release tag
            git tag $LATEST_TAG upstream/master
            git push origin $LATEST_TAG
            echo "New release found: $LATEST_TAG"
          fi
          
          # Update upstream branch
          git checkout -B upstream upstream/master
          rm -rf .github/ || true  # Remove entire .github directory
          git add -A
          git commit -m "Sync upstream $(date +%Y-%m-%d)" || echo "No changes to commit"
          git push origin upstream --force
          
          echo "Upstream branch updated"

      - name: Checkout upstream source
        uses: actions/checkout@v4  
        with:
          ref: upstream
          path: upstream

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.sync.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-contexts: |
            upstream=./upstream
          labels: |
            org.opencontainers.image.title=Tox Bootstrap Node
            org.opencontainers.image.description=Lightweight Tox bootstrap daemon
            org.opencontainers.image.source=https://github.com/TokTok/c-toxcore
            org.opencontainers.image.version=${{ steps.sync.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Generate summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** ${{ steps.sync.outputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.sync.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ steps.sync.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
