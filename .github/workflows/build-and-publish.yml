name: Build and Publish

on:
  # push:
  #   branches: [ main, master, develop ]
  #   tags: [ 'v*' ]
  # pull_request:
  #   branches: [ main, master ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/toxcore-local

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test container (amd64 only)
      if: github.event_name == 'pull_request'
      run: |
        # Build for testing
        docker build -t test-toxcore-local .
        
        # Basic functionality test
        echo "Testing container startup..."
        timeout 30s docker run --rm test-toxcore-local version || true
        
        # Test config generation
        echo "Testing configuration generation..."
        docker run --rm test-toxcore-local config
        
        # Test info display
        echo "Testing info display..."
        docker run --rm test-toxcore-local info

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  create-release:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        body: |
          ## Toxcore Local Network Container Release
          
          ### Features
          - Lightweight Alpine-based container (~50MB)
          - Multi-architecture support (amd64, arm64)
          - Optimized for local network deployment
          - Built-in bootstrap daemon configuration
          - Health checks and monitoring
          
          ### Usage
          ```bash
          # Quick start
          docker run -d --name toxcore-local \
            -p 33445:33445/tcp \
            -p 33445:33445/udp \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # With custom configuration
          docker run -d --name toxcore-local \
            -v /path/to/config:/etc/tox-bootstrapd \
            -v /path/to/data:/var/lib/tox-bootstrapd \
            -p 33445:33445/tcp \
            -p 33445:33445/udp \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### Image Details
          - **Registry**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`
          - **Tag**: `${{ github.ref_name }}`
          - **Base**: Alpine Linux 3.18
          - **Architecture**: linux/amd64, linux/arm64
        files: |
          Dockerfile
          entrypoint.sh
          config/tox-bootstrapd.conf
