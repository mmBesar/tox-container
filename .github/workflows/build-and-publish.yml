# Build and publish multi-architecture Tox bootstrap daemon container
name: Build and Publish Tox Bootstrap Container

permissions:
  contents: read
  packages: write

on:
  # push:
  #   branches: [main]
  #   paths:
  #     - 'Dockerfile'
  #     - 'entrypoint.sh'
  #     - '.github/workflows/build-and-publish.yml'
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - 'Dockerfile'
  #     - 'entrypoint.sh'
  #     - '.github/workflows/build-and-publish.yml'
  workflow_dispatch:
  # schedule:
  #   # Rebuild weekly to get latest upstream changes and security updates
  #   - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    outputs:
      image_name: ${{ steps.lowercase.outputs.image_name }}
      upstream_commit: ${{ steps.upstream.outputs.commit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches and tags
          ref: ${{ github.ref }}

      - name: Fetch all remote branches
        run: |
          git fetch --all
          echo "Available branches:"
          git branch -r
          echo "Available local branches:"
          git branch -a

      - name: Check upstream branch
        id: upstream
        run: |
          # Try to find upstream branch in different ways
          if git rev-parse --verify origin/upstream >/dev/null 2>&1; then
            UPSTREAM_COMMIT=$(git rev-parse origin/upstream)
            echo "commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
            echo "‚úÖ Upstream branch found: $UPSTREAM_COMMIT"
          elif git rev-parse --verify upstream >/dev/null 2>&1; then
            UPSTREAM_COMMIT=$(git rev-parse upstream)
            echo "commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
            echo "‚úÖ Upstream branch found: $UPSTREAM_COMMIT"
          elif git ls-remote --exit-code origin upstream >/dev/null 2>&1; then
            # Branch exists remotely, checkout locally
            git checkout -b upstream origin/upstream
            UPSTREAM_COMMIT=$(git rev-parse upstream)
            echo "commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
            echo "‚úÖ Upstream branch checked out: $UPSTREAM_COMMIT"
          else
            echo "‚ùå ERROR: 'upstream' branch not found!"
            echo "Available branches:"
            git branch -r
            echo "Please ensure 'upstream' branch exists and is pushed to origin"
            exit 1
          fi

      - name: Set up QEMU for emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: lowercase
        run: |
          IMAGE=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT
          echo "Image name: $IMAGE"

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.upstream.outputs.commit }},enable={{is_default_branch}}
          flavor: |
            suffix=-${{ matrix.arch }}

      - name: Build and push container (${{ matrix.arch }})
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REPO_URL=${{ github.server_url }}/${{ github.repository }}.git
            BRANCH=upstream
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-architecture manifest
        run: |
          IMAGE_NAME="${{ needs.build.outputs.image_name }}"
          UPSTREAM_COMMIT="${{ needs.build.outputs.upstream_commit }}"
          
          # Create manifest for 'latest' tag (if main branch)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Creating 'latest' manifest..."
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${IMAGE_NAME}:latest \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:latest-amd64 \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:latest-arm64
          
            echo "Creating upstream commit manifest..."
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${IMAGE_NAME}:${UPSTREAM_COMMIT} \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:${UPSTREAM_COMMIT}-amd64 \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:${UPSTREAM_COMMIT}-arm64
          fi
          
          # Create manifest for branch/PR tags
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Creating branch manifest for: $BRANCH_NAME"
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${IMAGE_NAME}:${BRANCH_NAME} \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:${BRANCH_NAME}-amd64 \
              ${{ env.REGISTRY }}/${IMAGE_NAME}:${BRANCH_NAME}-arm64
          fi

  test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test container functionality
        run: |
          IMAGE_NAME="${{ needs.build.outputs.image_name }}"
          
          echo "Testing container startup and basic functionality..."
          
          # Test container startup
          docker run --rm -d \
            --name tox-test \
            -e TOX_ENABLE_PUBLIC_BOOTSTRAP=false \
            -e TOX_LOG_LEVEL=DEBUG \
            ${{ env.REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}-amd64
          
          # Wait a bit for startup
          sleep 10
          
          # Check if container is running
          if docker ps | grep tox-test; then
            echo "‚úÖ Container started successfully"
          else
            echo "‚ùå Container failed to start"
            exit 1
          fi
          
          # Check logs for errors
          if docker logs tox-test 2>&1 | grep -i error; then
            echo "‚ùå Found errors in logs"
            docker logs tox-test
            exit 1
          fi
          
          # Check if bootstrap info file was generated
          if docker exec tox-test test -f /data/bootstrap_info.json; then
            echo "‚úÖ Bootstrap info file generated"
            docker exec tox-test cat /data/bootstrap_info.json
          else
            echo "‚ùå Bootstrap info file missing"
            exit 1
          fi
          
          # Check if daemon is responsive
          if docker exec tox-test pgrep tox-bootstrapd; then
            echo "‚úÖ tox-bootstrapd daemon is running"
          else
            echo "‚ùå tox-bootstrapd daemon not found"
            exit 1
          fi
          
          # Cleanup
          docker stop tox-test
          
          echo "üéâ All tests passed!"

  # Clean up old container images (keep last 10 versions)
  cleanup:
    needs: [manifest]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true

    steps:
      - name: Clean up old container images
        continue-on-error: true
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.repository }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'false'
