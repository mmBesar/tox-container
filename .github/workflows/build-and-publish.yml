name: Build and Publish

on:
  # schedule:
  #   - cron: '0 3 * * *'  # Daily at 3 AM UTC (1 hour after sync)
  # push:
  #   branches: [ main ]
  #   tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - stable
        - nightly

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build-type: ${{ steps.build-info.outputs.build-type }}
      version: ${{ steps.build-info.outputs.version }}
      tags: ${{ steps.build-info.outputs.tags }}
      image-name: ${{ steps.build-info.outputs.image-name }}
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Checkout upstream source
        uses: actions/checkout@v4
        with:
          ref: upstream
          path: upstream

      - name: Determine build type and version
        id: build-info
        run: |
          IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT
          
          # Manual build type override
          if [ "${{ github.event.inputs.build_type }}" = "stable" ]; then
            BUILD_TYPE="stable"
          elif [ "${{ github.event.inputs.build_type }}" = "nightly" ]; then
            BUILD_TYPE="nightly"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tagged release
            BUILD_TYPE="stable"
            VERSION="${{ github.ref_name }}"
          else
            # Auto-detect based on recent tags
            cd upstream
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "none")
            cd ..
            
            if [ "$LATEST_TAG" != "none" ] && git rev-parse "refs/tags/$LATEST_TAG" >/dev/null 2>&1; then
              # We have the latest release, check if it's recent (within 7 days)
              TAG_DATE=$(git log -1 --format=%ct "refs/tags/$LATEST_TAG" 2>/dev/null || echo "0")
              CURRENT_DATE=$(date +%s)
              DAYS_OLD=$(( (CURRENT_DATE - TAG_DATE) / 86400 ))
              
              if [ $DAYS_OLD -le 7 ]; then
                BUILD_TYPE="stable"
                VERSION="$LATEST_TAG"
              else
                BUILD_TYPE="nightly"
              fi
            else
              BUILD_TYPE="nightly"
            fi
          fi
          
          echo "build-type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          
          # Set version and tags based on build type
          if [ "$BUILD_TYPE" = "stable" ]; then
            if [ -z "$VERSION" ]; then
              VERSION=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tags=${IMAGE_NAME_LOWER}:${VERSION},${IMAGE_NAME_LOWER}:latest" >> $GITHUB_OUTPUT
          else
            DATE=$(date +%Y%m%d)
            VERSION="nightly-$DATE"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tags=${IMAGE_NAME_LOWER}:nightly,${IMAGE_NAME_LOWER}:$VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "Build type: $BUILD_TYPE, Version: $VERSION"

  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Checkout upstream source  
        uses: actions/checkout@v4
        with:
          ref: upstream
          path: upstream

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ needs.prepare.outputs.image-name }}:${{ needs.prepare.outputs.version }}-amd64
          platforms: linux/amd64
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          build-contexts: |
            upstream=./upstream
          labels: |
            org.opencontainers.image.title=Tox Bootstrap Node
            org.opencontainers.image.description=Lightweight Tox bootstrap daemon for decentralized communication
            org.opencontainers.image.source=https://github.com/TokTok/c-toxcore
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  build-arm64:
    needs: prepare  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Checkout upstream source
        uses: actions/checkout@v4
        with:
          ref: upstream
          path: upstream

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  
          push: true
          tags: ${{ needs.prepare.outputs.image-name }}:${{ needs.prepare.outputs.version }}-arm64
          platforms: linux/arm64
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          build-contexts: |
            upstream=./upstream
          labels: |
            org.opencontainers.image.title=Tox Bootstrap Node
            org.opencontainers.image.description=Lightweight Tox bootstrap daemon for decentralized communication
            org.opencontainers.image.source=https://github.com/TokTok/c-toxcore
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  create-manifest:
    needs: [prepare, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Convert tags to array
          IFS=',' read -ra TAGS <<< "${{ needs.prepare.outputs.tags }}"
          
          for TAG in "${TAGS[@]}"; do
            echo "Creating manifest for $TAG"
            docker buildx imagetools create \
              --tag "$TAG" \
              "${{ needs.prepare.outputs.image-name }}:${{ needs.prepare.outputs.version }}-amd64" \
              "${{ needs.prepare.outputs.image-name }}:${{ needs.prepare.outputs.version }}-arm64"
          done

      - name: Generate summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** ${{ needs.prepare.outputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.prepare.outputs.image-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ needs.prepare.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 33445:33445 -p 33445:33445/udp \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v tox-data:/var/lib/tox-bootstrapd \\" >> $GITHUB_STEP_SUMMARY
          echo "  --user 1000:1000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ needs.prepare.outputs.image-name }}:${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
