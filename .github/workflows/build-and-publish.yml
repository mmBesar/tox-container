name: Build and Publish Multi-Arch

on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile'
      - 'entrypoint.sh'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'Dockerfile' 
      - 'entrypoint.sh'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - stable
        - nightly

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build-type: ${{ steps.build-info.outputs.build-type }}
      version: ${{ steps.build-info.outputs.version }}
      image_name: ${{ steps.build-info.outputs.image_name }}
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Checkout upstream source
        uses: actions/checkout@v4
        with:
          ref: upstream
          path: upstream

      - name: Determine build type and version
        id: build-info
        run: |
          IMAGE_NAME_LOWER=$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT
          
          # Manual build type override
          if [ "${{ github.event.inputs.build_type }}" = "stable" ]; then
            BUILD_TYPE="stable"
          elif [ "${{ github.event.inputs.build_type }}" = "nightly" ]; then
            BUILD_TYPE="nightly"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tagged release
            BUILD_TYPE="stable"
            VERSION="${{ github.ref_name }}"
          else
            # Auto-detect based on recent tags
            cd upstream
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "none")
            cd ..
            
            if [ "$LATEST_TAG" != "none" ] && git rev-parse "refs/tags/$LATEST_TAG" >/dev/null 2>&1; then
              # We have the latest release, check if it's recent (within 7 days)
              TAG_DATE=$(git log -1 --format=%ct "refs/tags/$LATEST_TAG" 2>/dev/null || echo "0")
              CURRENT_DATE=$(date +%s)
              DAYS_OLD=$(( (CURRENT_DATE - TAG_DATE) / 86400 ))
              
              if [ $DAYS_OLD -le 7 ]; then
                BUILD_TYPE="stable"
                VERSION="$LATEST_TAG"
              else
                BUILD_TYPE="nightly"
              fi
            else
              BUILD_TYPE="nightly"
            fi
          fi
          
          echo "build-type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          
          # Set version based on build type
          if [ "$BUILD_TYPE" = "stable" ]; then
            if [ -z "$VERSION" ]; then
              VERSION=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            DATE=$(date +%Y%m%d)
            VERSION="nightly-$DATE"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "Build type: $BUILD_TYPE, Version: $VERSION"

  # Build per architecture
  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Checkout upstream source
        uses: actions/checkout@v4
        with:
          ref: upstream
          path: upstream

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.version }}-${{ matrix.arch }}
            ${{ needs.prepare.outputs.image_name }}:latest-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          build-contexts: |
            upstream=./upstream
          labels: |
            org.opencontainers.image.title=Tox Bootstrap Node
            org.opencontainers.image.description=Lightweight Tox bootstrap daemon for decentralized communication
            org.opencontainers.image.source=https://github.com/TokTok/c-toxcore
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Create multi-arch manifests
  manifest:
    needs: [prepare, build]
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifests
        run: |
          IMAGE=${{ needs.prepare.outputs.image_name }}
          VERSION=${{ needs.prepare.outputs.version }}
          
          # Create versioned manifest
          docker buildx imagetools create \
            --tag $IMAGE:$VERSION \
            $IMAGE:$VERSION-amd64 \
            $IMAGE:$VERSION-arm64
          
          # Create latest/nightly manifest based on build type
          if [ "${{ needs.prepare.outputs.build-type }}" = "stable" ]; then
            docker buildx imagetools create \
              --tag $IMAGE:latest \
              $IMAGE:$VERSION-amd64 \
              $IMAGE:$VERSION-arm64
          else
            docker buildx imagetools create \
              --tag $IMAGE:nightly \
              $IMAGE:$VERSION-amd64 \
              $IMAGE:$VERSION-arm64
          fi

      - name: Generate summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** ${{ needs.prepare.outputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.prepare.outputs.image_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectures:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 33445:33445 -p 33445:33445/udp \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v tox-data:/var/lib/tox-bootstrapd \\" >> $GITHUB_STEP_SUMMARY
          echo "  --user 1000:1000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
